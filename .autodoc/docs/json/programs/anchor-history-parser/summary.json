{
  "folderName": "anchor-history-parser",
  "folderPath": ".autodoc/docs/json/programs/anchor-history-parser",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/tree/master/.autodoc/docs/json/programs/anchor-history-parser",
  "files": [],
  "folders": [
    {
      "folderName": "tests",
      "folderPath": ".autodoc/docs/json/programs/anchor-history-parser/tests",
      "url": "https://github.com/switchboard-xyz/sbv2-solana/tree/master/.autodoc/docs/json/programs/anchor-history-parser/tests",
      "files": [
        {
          "fileName": "anchor-history-parser.test.ts",
          "filePath": "programs/anchor-history-parser/tests/anchor-history-parser.test.ts",
          "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/programs/anchor-history-parser/tests/anchor-history-parser.test.ts",
          "summary": "This code is part of a test suite for the `anchor-history-parser` module in the `sbv2-solana` project. The purpose of this module is to interact with the Switchboard oracle network on the Solana blockchain, specifically focusing on creating and reading data feeds with history buffers.\n\nThe test suite sets up a local development environment using the `anchor.AnchorProvider.env()` method and initializes a `SwitchboardTestContext` object with custom configurations. It also creates a `NodeOracle` instance from the testnet release channel and starts it.\n\nThe first test, \"Creates a feed with a history buffer\", demonstrates how to create a new data feed with a history buffer that can store up to 200,000 samples. It uses the `switchboard.queue.createFeed()` method to create the feed with the specified configuration and jobs. After creating the feed, it loads the aggregator and history data using the `loadData()` method.\n\nThe second test, \"Reads an aggregator history buffer\", shows how to read a history buffer on-chain for an existing feed with pre-populated samples. It first loads the aggregator data using the `AggregatorAccount` class and the `loadData()` method. Then, it reads the history buffer using the `loadHistory()` method. Finally, it sends a transaction to the Solana network to read the history buffer at a specific timestamp using the `program.methods.readHistory()` method. The transaction signature and parsed transaction logs are printed to the console.\n\nThese tests serve as examples for developers to understand how to interact with the Switchboard oracle network on Solana using the `anchor-history-parser` module, specifically focusing on creating and reading data feeds with history buffers.",
          "questions": "1. **Question:** What is the purpose of the `AnchorHistoryParser` in this code?\n   **Answer:** The `AnchorHistoryParser` is an Anchor program that is used to interact with the history buffer of a data feed on the Solana blockchain. It provides methods to read the history buffer of an existing feed with pre-populated samples.\n\n2. **Question:** How does the `NodeOracle` work in this code?\n   **Answer:** The `NodeOracle` is an instance of the Switchboard Oracle that is configured to work with the local Solana cluster. It is responsible for processing and submitting data to the data feed on the Solana blockchain. The oracle is started and stopped before and after the tests, respectively.\n\n3. **Question:** What is the purpose of the `sleep` function in this code?\n   **Answer:** The `sleep` function is a utility function that returns a Promise that resolves after a specified number of milliseconds. It is used in the tests to introduce a delay, allowing time for the Solana transactions to be processed and confirmed before proceeding with the next steps in the test."
        }
      ],
      "folders": [],
      "summary": "The `anchor-history-parser.test.ts` file is a test suite for the `anchor-history-parser` module, which is responsible for interacting with the Switchboard oracle network on the Solana blockchain. This module focuses on creating and reading data feeds with history buffers. The test suite demonstrates how to create a new data feed with a history buffer and how to read a history buffer on-chain for an existing feed.\n\nThe test suite sets up a local development environment using the `anchor.AnchorProvider.env()` method and initializes a `SwitchboardTestContext` object with custom configurations. It also creates a `NodeOracle` instance from the testnet release channel and starts it.\n\nHere's an example of how the code in this file might be used:\n\n```typescript\n// Set up a local development environment\nconst provider = anchor.AnchorProvider.env();\nconst switchboard = new SwitchboardTestContext(provider);\n\n// Create a new data feed with a history buffer that can store up to 200,000 samples\nconst feed = await switchboard.queue.createFeed({\n  maxHistory: 200000,\n  jobs: [/* ... */],\n});\n\n// Load the aggregator and history data\nawait feed.loadData();\n\n// Read a history buffer on-chain for an existing feed with pre-populated samples\nconst aggregator = new AggregatorAccount(feed.aggregator);\nawait aggregator.loadData();\n\n// Read the history buffer at a specific timestamp\nconst result = await program.methods.readHistory(/* ... */);\nconsole.log(\"Transaction signature:\", result.signature);\nconsole.log(\"Parsed transaction logs:\", result.logs);\n```\n\nIn the first test, \"Creates a feed with a history buffer\", the code demonstrates how to create a new data feed with a history buffer that can store up to 200,000 samples. It uses the `switchboard.queue.createFeed()` method to create the feed with the specified configuration and jobs. After creating the feed, it loads the aggregator and history data using the `loadData()` method.\n\nIn the second test, \"Reads an aggregator history buffer\", the code shows how to read a history buffer on-chain for an existing feed with pre-populated samples. It first loads the aggregator data using the `AggregatorAccount` class and the `loadData()` method. Then, it reads the history buffer using the `loadHistory()` method. Finally, it sends a transaction to the Solana network to read the history buffer at a specific timestamp using the `program.methods.readHistory()` method. The transaction signature and parsed transaction logs are printed to the console.\n\nThese tests serve as examples for developers to understand how to interact with the Switchboard oracle network on Solana using the `anchor-history-parser` module, specifically focusing on creating and reading data feeds with history buffers.",
      "questions": ""
    }
  ],
  "summary": "The `anchor-history-parser` module in the `sbv2-solana` project is responsible for interacting with the Switchboard oracle network on the Solana blockchain, focusing on creating and reading data feeds with history buffers. The module contains a test suite, `anchor-history-parser.test.ts`, which demonstrates how to create a new data feed with a history buffer and how to read a history buffer on-chain for an existing feed.\n\nThe test suite sets up a local development environment using the `anchor.AnchorProvider.env()` method and initializes a `SwitchboardTestContext` object with custom configurations. It also creates a `NodeOracle` instance from the testnet release channel and starts it.\n\nHere's an example of how the code in this file might be used:\n\n```typescript\n// Set up a local development environment\nconst provider = anchor.AnchorProvider.env();\nconst switchboard = new SwitchboardTestContext(provider);\n\n// Create a new data feed with a history buffer that can store up to 200,000 samples\nconst feed = await switchboard.queue.createFeed({\n  maxHistory: 200000,\n  jobs: [/* ... */],\n});\n\n// Load the aggregator and history data\nawait feed.loadData();\n\n// Read a history buffer on-chain for an existing feed with pre-populated samples\nconst aggregator = new AggregatorAccount(feed.aggregator);\nawait aggregator.loadData();\n\n// Read the history buffer at a specific timestamp\nconst result = await program.methods.readHistory(/* ... */);\nconsole.log(\"Transaction signature:\", result.signature);\nconsole.log(\"Parsed transaction logs:\", result.logs);\n```\n\nIn the first test, \"Creates a feed with a history buffer\", the code demonstrates how to create a new data feed with a history buffer that can store up to 200,000 samples. It uses the `switchboard.queue.createFeed()` method to create the feed with the specified configuration and jobs. After creating the feed, it loads the aggregator and history data using the `loadData()` method.\n\nIn the second test, \"Reads an aggregator history buffer\", the code shows how to read a history buffer on-chain for an existing feed with pre-populated samples. It first loads the aggregator data using the `AggregatorAccount` class and the `loadData()` method. Then, it reads the history buffer using the `loadHistory()` method. Finally, it sends a transaction to the Solana network to read the history buffer at a specific timestamp using the `program.methods.readHistory()` method. The transaction signature and parsed transaction logs are printed to the console.\n\nThese tests serve as examples for developers to understand how to interact with the Switchboard oracle network on Solana using the `anchor-history-parser` module, specifically focusing on creating and reading data feeds with history buffers.",
  "questions": ""
}