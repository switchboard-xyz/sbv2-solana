{
  "folderName": "anchor-feed-parser",
  "folderPath": ".autodoc/docs/json/programs/anchor-feed-parser",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/tree/master/.autodoc/docs/json/programs/anchor-feed-parser",
  "files": [],
  "folders": [
    {
      "folderName": "tests",
      "folderPath": ".autodoc/docs/json/programs/anchor-feed-parser/tests",
      "url": "https://github.com/switchboard-xyz/sbv2-solana/tree/master/.autodoc/docs/json/programs/anchor-feed-parser/tests",
      "files": [
        {
          "fileName": "anchor-feed-parser.test.ts",
          "filePath": "programs/anchor-feed-parser/tests/anchor-feed-parser.test.ts",
          "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/programs/anchor-feed-parser/tests/anchor-feed-parser.test.ts",
          "summary": "This code is a test suite for the `anchor-feed-parser` module in the `sbv2-solana` project. The purpose of this module is to parse and read data from an aggregator feed on the Solana blockchain. The test suite uses the `anchor` library to interact with the Solana blockchain and the `@switchboard-xyz` packages for managing oracles and aggregator feeds.\n\nThe test suite sets up a `SwitchboardTestContext` and a `NodeOracle` before running the tests. The `SwitchboardTestContext` is used to create and manage aggregator feeds, while the `NodeOracle` is responsible for providing data to the aggregator feeds.\n\nThe main test in this suite, \"Creates a static feed that resolves to 100\", performs the following steps:\n\n1. Create a new aggregator feed with a single job that returns a static value of 100.\n2. Open a new round for the aggregator feed and wait for the result.\n3. Assert that the result of the aggregator feed is 100.\n4. Call the `readResult` method of the `anchor-feed-parser` program to read the result from the aggregator feed.\n5. Wait for the RPC call to complete and fetch the logs of the transaction.\n6. Parse the logs to extract the feed result and assert that it is 100.\n\nThis test ensures that the `anchor-feed-parser` module can correctly read and parse data from an aggregator feed on the Solana blockchain. The test suite can be extended with more tests to cover different scenarios and edge cases, ensuring the robustness of the module in the larger project.",
          "questions": "1. **Question:** What is the purpose of the `AnchorFeedParser` program in this code?\n\n   **Answer:** The `AnchorFeedParser` program is an instance of the Anchor smart contract that is being tested in this code. It is responsible for parsing and reading the result of an aggregator feed.\n\n2. **Question:** How is the `NodeOracle` instance configured and what is its role in this test?\n\n   **Answer:** The `NodeOracle` instance is configured with parameters such as the chain, release channel, network, RPC URL, oracle key, and secret path. Its role in this test is to act as an oracle that provides data to the aggregator feed.\n\n3. **Question:** What is the purpose of the `Creates a static feed that resolves to 100` test case?\n\n   **Answer:** The purpose of this test case is to create a static feed with a single job that resolves to the value 100, and then verify that the aggregator result and the feed result parsed by the `AnchorFeedParser` program both match the expected value of 100."
        }
      ],
      "folders": [],
      "summary": "The `anchor-feed-parser.test.ts` file is a test suite for the `anchor-feed-parser` module, which is responsible for parsing and reading data from an aggregator feed on the Solana blockchain within the `sbv2-solana` project. The test suite leverages the `anchor` library for interacting with the Solana blockchain and the `@switchboard-xyz` packages for managing oracles and aggregator feeds.\n\nThe test suite initializes a `SwitchboardTestContext` and a `NodeOracle`. The `SwitchboardTestContext` is utilized for creating and managing aggregator feeds, while the `NodeOracle` is in charge of providing data to these feeds.\n\nThe primary test in this suite, \"Creates a static feed that resolves to 100\", follows these steps:\n\n1. Create a new aggregator feed with a single job returning a static value of 100.\n2. Open a new round for the aggregator feed and wait for the result.\n3. Assert that the aggregator feed's result is 100.\n4. Invoke the `readResult` method of the `anchor-feed-parser` program to read the result from the aggregator feed.\n5. Wait for the RPC call to complete and retrieve the transaction logs.\n6. Parse the logs to extract the feed result and assert that it is 100.\n\nThis test ensures that the `anchor-feed-parser` module can accurately read and parse data from an aggregator feed on the Solana blockchain. The test suite can be expanded with additional tests to cover various scenarios and edge cases, enhancing the module's robustness within the larger project.\n\nFor example, developers might use this code to test the `anchor-feed-parser` module's ability to read and parse data from different types of aggregator feeds, such as feeds with multiple jobs or feeds that require complex data processing. The test suite can also be used to verify the module's compatibility with various Solana network configurations and environments.\n\nHere's a code snippet illustrating how the `anchor-feed-parser.test.ts` file might be used:\n\n```typescript\nimport { SwitchboardTestContext, NodeOracle } from '@switchboard-xyz';\nimport { anchorFeedParser } from 'path/to/anchor-feed-parser';\n\n// Initialize the test context and oracle\nconst testContext = new SwitchboardTestContext();\nconst oracle = new NodeOracle();\n\n// Create a new aggregator feed with a single job returning a static value of 100\nconst feed = await testContext.createAggregatorFeed({ jobs: [{ type: 'static', value: 100 }] });\n\n// Open a new round for the aggregator feed and wait for the result\nawait feed.openRound();\nawait testContext.waitForRoundResult(feed);\n\n// Assert that the aggregator feed's result is 100\nexpect(feed.getResult()).toEqual(100);\n\n// Invoke the `readResult` method of the `anchor-feed-parser` program to read the result from the aggregator feed\nconst result = await anchorFeedParser.readResult(feed);\n\n// Assert that the parsed result is 100\nexpect(result).toEqual(100);\n```\n\nThis test suite is an essential component of the `sbv2-solana` project, as it ensures the correct functionality of the `anchor-feed-parser` module, which is responsible for parsing and reading data from aggregator feeds on the Solana blockchain.",
      "questions": ""
    }
  ],
  "summary": "The `anchor-feed-parser` module in the `sbv2-solana` project is responsible for parsing and reading data from an aggregator feed on the Solana blockchain. The module leverages the `anchor` library for interacting with the Solana blockchain and the `@switchboard-xyz` packages for managing oracles and aggregator feeds.\n\nThe test suite in the `tests` subfolder, `anchor-feed-parser.test.ts`, ensures the correct functionality of the `anchor-feed-parser` module. It initializes a `SwitchboardTestContext` and a `NodeOracle`. The `SwitchboardTestContext` is utilized for creating and managing aggregator feeds, while the `NodeOracle` is in charge of providing data to these feeds.\n\nThe primary test in this suite, \"Creates a static feed that resolves to 100\", follows these steps:\n\n1. Create a new aggregator feed with a single job returning a static value of 100.\n2. Open a new round for the aggregator feed and wait for the result.\n3. Assert that the aggregator feed's result is 100.\n4. Invoke the `readResult` method of the `anchor-feed-parser` program to read the result from the aggregator feed.\n5. Wait for the RPC call to complete and retrieve the transaction logs.\n6. Parse the logs to extract the feed result and assert that it is 100.\n\nHere's a code snippet illustrating how the `anchor-feed-parser.test.ts` file might be used:\n\n```typescript\nimport { SwitchboardTestContext, NodeOracle } from '@switchboard-xyz';\nimport { anchorFeedParser } from 'path/to/anchor-feed-parser';\n\n// Initialize the test context and oracle\nconst testContext = new SwitchboardTestContext();\nconst oracle = new NodeOracle();\n\n// Create a new aggregator feed with a single job returning a static value of 100\nconst feed = await testContext.createAggregatorFeed({ jobs: [{ type: 'static', value: 100 }] });\n\n// Open a new round for the aggregator feed and wait for the result\nawait feed.openRound();\nawait testContext.waitForRoundResult(feed);\n\n// Assert that the aggregator feed's result is 100\nexpect(feed.getResult()).toEqual(100);\n\n// Invoke the `readResult` method of the `anchor-feed-parser` program to read the result from the aggregator feed\nconst result = await anchorFeedParser.readResult(feed);\n\n// Assert that the parsed result is 100\nexpect(result).toEqual(100);\n```\n\nThis test suite is an essential component of the project, as it ensures the correct functionality of the `anchor-feed-parser` module. Developers might use this code to test the module's ability to read and parse data from different types of aggregator feeds, such as feeds with multiple jobs or feeds that require complex data processing. The test suite can also be used to verify the module's compatibility with various Solana network configurations and environments.",
  "questions": ""
}