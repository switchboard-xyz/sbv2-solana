{
  "fileName": "aggregatorHistoryBuffer.ts",
  "filePath": "javascript/solana.js/src/accounts/aggregatorHistoryBuffer.ts",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/javascript/solana.js/src/accounts/aggregatorHistoryBuffer.ts",
  "summary": "The `AggregatorHistoryBuffer` class in this code represents a round-robin buffer of historical samples for an aggregator account in the sbv2-solana project. It provides methods to create, decode, and fetch historical samples from the buffer, as well as to invoke a callback when the aggregator account's data changes on-chain.\n\nThe `AggregatorHistoryBuffer` class has several static methods:\n\n- `default(size: number)`: Returns a history buffer account initialized with default values.\n- `decode(historyBuffer: Buffer)`: Decodes an aggregator's history buffer and returns an array of historical samples in ascending order by timestamp.\n- `fromAggregator(program: SwitchboardProgram, aggregator: types.AggregatorAccountData)`: Returns an aggregator's assigned history buffer or undefined if it doesn't exist.\n- `createInstructions(program: SwitchboardProgram, payer: PublicKey, params: AggregatorHistoryInit)`: Creates instructions for creating a history buffer for an aggregator and returns a tuple containing the `AggregatorHistoryBuffer` instance and a `TransactionObject`.\n- `create(program: SwitchboardProgram, params: AggregatorHistoryInit)`: Creates a history buffer for an aggregator and returns a tuple containing the `AggregatorHistoryBuffer` instance and a transaction signature.\n- `collectMetrics(history: Array<types.AggregatorHistoryRow>, minUpdateDelaySeconds: number, period?: number)`: Collects metrics from the history buffer and returns an `AggregatorHistoryMetrics` object.\n\nThe class also has instance methods:\n\n- `decode(historyBuffer: Buffer)`: Decodes an aggregator's history buffer and returns an array of historical samples.\n- `loadData()`: Fetches an aggregator's history buffer and returns an array of historical samples.\n- `onChange(callback: OnAccountChangeCallback<Array<types.AggregatorHistoryRow>>, commitment: Commitment = 'confirmed')`: Invokes a callback each time an AggregatorAccount's data changes on-chain.\n\nHere's an example of how to create a history buffer for an aggregator:\n\n```ts\nimport { AggregatorAccount, AggregatorHistoryBuffer } from '@switchboard-xyz/solana.js';\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorKey);\nconst aggregator = await aggregatorAccount.loadData();\nconst [historyBuffer, addHistorySignature] = await AggregatorHistoryBuffer.create(program, {\n   aggregatorAccount,\n   maxSamples: 10000,\n});\nconst history = await historyBuffer.loadData();\n```\n\nThe `AggregatorHistoryMetrics` type represents various metrics collected from the history buffer, such as period, number of samples, average update delay, update coefficient, average value, standard deviation, and min/max values.",
  "questions": "1. **Question:** How does the `AggregatorHistoryBuffer` class handle the storage and retrieval of historical samples in a round-robin buffer?\n   **Answer:** The `AggregatorHistoryBuffer` class stores historical samples in a round-robin buffer by allocating a fixed-size buffer and using the `decode` method to read the samples in ascending order by timestamp. The `loadData` method fetches the aggregator's history buffer and returns an array of historical samples.\n\n2. **Question:** What is the purpose of the `createInstructions` and `create` methods in the `AggregatorHistoryBuffer` class, and how do they differ?\n   **Answer:** The `createInstructions` method generates the instructions and signers required to create a new `AggregatorHistoryBuffer` account, while the `create` method actually creates the account by executing the instructions generated by `createInstructions`. The `create` method returns the created `AggregatorHistoryBuffer` account and the transaction signature.\n\n3. **Question:** How does the `collectMetrics` method in the `AggregatorHistoryBuffer` class calculate various metrics from the historical samples?\n   **Answer:** The `collectMetrics` method filters the historical samples based on the provided period, calculates various metrics such as average update delay, update coefficient, average value, and standard deviation, and returns an object containing these metrics along with the start, end, min, and max samples."
}