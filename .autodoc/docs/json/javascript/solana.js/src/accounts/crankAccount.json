{
  "fileName": "crankAccount.ts",
  "filePath": "javascript/solana.js/src/accounts/crankAccount.ts",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/javascript/solana.js/src/accounts/crankAccount.ts",
  "summary": "The `CrankAccount` class in this code is responsible for managing a priority queue of aggregator accounts and their next available update time. This scheduling mechanism ensures that `AggregatorAccount` instances are updated as close as possible to their specified update interval.\n\nThe class provides several methods to interact with the crank account, such as:\n\n- `loadData()`: Retrieves and decodes the `types.CrankAccountData` stored in the account.\n- `createInstructions()`: Generates instructions to create a new `CrankAccount` with the specified parameters.\n- `pushInstruction()`: Creates a transaction object to push a new aggregator onto the crank.\n- `popInstruction()`: Creates a transaction object to pop the next ready aggregator from the crank.\n- `peakNextWithTime()`: Returns an array of the next aggregator pubkeys to be popped from the crank, limited by a specified number.\n- `peakNextReady()`: Returns an array of the next readily updateable aggregator pubkeys to be popped from the crank, limited by a specified number.\n- `loadCrank()`: Loads a crank's `CrankDataBuffer` and returns the list of aggregators and their next available update time.\n\nThe `CrankAccount` class also provides methods to create, push, and pop crank accounts, as well as methods to fetch and convert account data to JSON format.\n\nExample usage:\n\n```javascript\n// Load an existing CrankAccount with its current on-chain state\nconst [crankAccount, state] = await CrankAccount.load(program, publicKey);\n\n// Push a new aggregator onto the crank\nconst txnSignature = await crankAccount.push(params);\n\n// Pop the next ready aggregator from the crank\nconst txnSignature = await crankAccount.pop(params);\n```\n\nIn the larger project, the `CrankAccount` class is used to manage the scheduling of aggregator updates, ensuring that data is updated efficiently and in a timely manner.",
  "questions": "1. **Question**: What is the purpose of the `CrankAccount` class and how does it relate to the `AggregatorAccount` and `QueueAccount` classes?\n   **Answer**: The `CrankAccount` class represents an account holding a priority queue of aggregators and their next available update time. It serves as a scheduling mechanism to ensure that `AggregatorAccount`s are updated as close as possible to their specified update interval. The `CrankAccount` is associated with a `QueueAccount` and interacts with `AggregatorAccount`s by pushing and popping them based on their update times.\n\n2. **Question**: How does the `peakNextReady` method work and what does it return?\n   **Answer**: The `peakNextReady` method returns an array of the next readily updateable aggregator public keys to be popped from the crank, limited by the provided number `num`. It filters the aggregator public keys based on whether their next available update timestamp is less than or equal to the current Unix timestamp.\n\n3. **Question**: What is the purpose of the `pushInstruction` and `popInstruction` methods in the `CrankAccount` class?\n   **Answer**: The `pushInstruction` method creates a transaction object to push a new aggregator onto the crank with the provided parameters. The `popInstruction` method creates a transaction object to pop the next readily updateable aggregator from the crank and process its update. Both methods return a `TransactionObject` that can be signed and sent to the network for execution."
}