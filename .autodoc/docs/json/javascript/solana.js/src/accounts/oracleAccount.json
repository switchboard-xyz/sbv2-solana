{
  "fileName": "oracleAccount.ts",
  "filePath": "javascript/solana.js/src/accounts/oracleAccount.ts",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/javascript/solana.js/src/accounts/oracleAccount.ts",
  "summary": "The `OracleAccount` class in this code represents an oracle account in the sbv2-solana project. An oracle is a server that facilitates the flow of information between the internet and a blockchain, and is rewarded for responding with the honest majority. The `OracleAccount` class holds an oracle's configuration, including the authority, reward/slashing wallet, and a set of metrics tracking its reliability.\n\nThe class provides several methods to interact with the oracle account, such as creating a new oracle account, loading an existing oracle account, staking tokens, withdrawing tokens, and sending heartbeat transactions. It also provides utility methods to fetch the balance of the oracle's staking wallet and to listen for changes in the oracle account's data.\n\nFor example, to create a new oracle account, you can use the `OracleAccount.create()` method, which takes a set of parameters such as the queue account, name, metadata, authority, and staking wallet keypair. This method returns a new `OracleAccount` instance and an array of transaction signatures.\n\nTo stake tokens in the oracle account, you can use the `stake()` method, which takes a set of parameters such as the stake amount, funder token wallet, and funder authority. This method returns a transaction signature.\n\nTo send a heartbeat transaction, you can use the `heartbeat()` method, which takes optional parameters such as the queue account, token wallet, queue authority, and permission. This method returns a transaction signature.\n\nThe `OracleAccount` class also provides methods to interact with permission accounts, which are used to control access to certain actions in the oracle account. The `getPermissionAccount()` method returns a `PermissionAccount` instance and a bump value, while the `toAccountsJSON()` method returns a JSON representation of the oracle account and its associated permission account.",
  "questions": "1. **Question**: What is the purpose of the `OracleAccount` class and how does it interact with the SwitchboardProgram?\n   **Answer**: The `OracleAccount` class represents an oracle's configuration, including the authority, reward/slashing wallet, and a set of metrics tracking its reliability. It provides methods to interact with the oracle account on the blockchain, such as creating, loading, staking, and withdrawing tokens. It interacts with the `SwitchboardProgram` to perform these operations on the Solana blockchain.\n\n2. **Question**: How does the `heartbeat` method work and what is its purpose in the `OracleAccount` class?\n   **Answer**: The `heartbeat` method is used to send a heartbeat transaction to the blockchain, indicating that the oracle is still active and providing data. It constructs and sends a transaction with the `oracleHeartbeat` instruction, which updates the oracle's state on the blockchain.\n\n3. **Question**: What is the purpose of the `fetchBalance` and `fetchBalanceBN` methods in the `OracleAccount` class?\n   **Answer**: The `fetchBalance` and `fetchBalanceBN` methods are used to fetch the current balance of the oracle's staking wallet. `fetchBalance` returns the balance as a number, while `fetchBalanceBN` returns the balance as a `BN` (BigNumber) object for more precise calculations."
}