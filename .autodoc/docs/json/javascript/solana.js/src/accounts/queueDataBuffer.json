{
  "fileName": "queueDataBuffer.ts",
  "filePath": "javascript/solana.js/src/accounts/queueDataBuffer.ts",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/javascript/solana.js/src/accounts/queueDataBuffer.ts",
  "summary": "The `QueueDataBuffer` class in this code is responsible for managing an account that holds a list of oracles actively heartbeating on the queue. The class extends the `Account` class and is parameterized with an array of `PublicKey` objects representing the oracles.\n\nThe class provides several methods for working with the queue data buffer:\n\n- `getAccountSize(size: number)`: Returns the account size based on the number of oracles.\n- `default(size = 100)`: Returns a default buffer with the specified size, initialized to default values.\n- `createMock(programId: PublicKey, data: { size?: number; oracles?: Array<PublicKey> }, options?: { lamports?: number; rentEpoch?: number; })`: Creates a mock account info for a given VRF configuration, useful for test integrations.\n- `onChange(callback: OnAccountChangeCallback<Array<PublicKey>>, commitment: Commitment = 'confirmed')`: Invokes a callback each time the oracle queue buffer changes on-chain.\n- `loadData()`: Retrieves and decodes the data stored in the account.\n- `decode(bufferAccountInfo: AccountInfo<Buffer>)`: Decodes the buffer account info into an array of `PublicKey` objects.\n- `fromQueue(program: SwitchboardProgram, queue: types.OracleQueueAccountData)`: Returns a queue data buffer from the given queue.\n\nThese methods allow the larger project to interact with the queue data buffer, such as creating mock accounts for testing, loading data from the buffer, and reacting to changes in the buffer. For example, the `onChange` method can be used to monitor the buffer for changes and trigger actions based on the updated list of oracles.\n\n```javascript\nconst queueDataBuffer = new QueueDataBuffer(program, publicKey);\nqueueDataBuffer.onChange((oracles) => {\n  console.log(\"Updated list of oracles:\", oracles);\n});\n```\n\nOverall, the `QueueDataBuffer` class plays a crucial role in managing the list of oracles and their heartbeats in the sbv2-solana project.",
  "questions": "1. **Question**: What is the purpose of the `QueueDataBuffer` class and how does it relate to the oracles?\n   **Answer**: The `QueueDataBuffer` class represents an account holding a list of oracles that are actively heartbeating on the queue. It provides methods to interact with the oracle queue buffer, such as creating a mock account, loading data, and decoding the buffer.\n\n2. **Question**: How does the `onChange` method work and when should it be used?\n   **Answer**: The `onChange` method is used to invoke a callback each time a QueueAccount's oracle queue buffer has changed on-chain. It is useful for monitoring changes in the oracle queue buffer and reacting to those changes in real-time.\n\n3. **Question**: What is the purpose of the `static fromQueue` method and how does it relate to the `types.OracleQueueAccountData` parameter?\n   **Answer**: The `fromQueue` method is used to create a `QueueDataBuffer` instance from an `OracleQueueAccountData` object. It takes a `SwitchboardProgram` and an `OracleQueueAccountData` object as input and returns a new `QueueDataBuffer` instance with the associated data buffer."
}