{
  "fileName": "leaseAccount.ts",
  "filePath": "javascript/solana.js/src/accounts/leaseAccount.ts",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/javascript/solana.js/src/accounts/leaseAccount.ts",
  "summary": "The `LeaseAccount` class in this code represents an account type for an AggregatorAccount's pre-funded escrow, which is used to reward OracleAccounts for responding to open round requests. The class provides methods to create, load, and manage LeaseAccounts, as well as to interact with associated accounts such as QueueAccount, AggregatorAccount, and JobAccount.\n\nThe `LeaseAccount.createInstructions()` method creates instructions to initialize a LeaseAccount and optionally funds it with wrapped tokens. It takes a SwitchboardProgram instance, a payer PublicKey, and a set of parameters including aggregatorAccount, queueAccount, and optional fields like jobAuthorities, jobPubkeys, and withdrawAuthority.\n\nThe `LeaseAccount.create()` method creates a LeaseAccount and optionally funds it with wrapped tokens. It returns a Promise that resolves to a tuple containing the LeaseAccount and the corresponding TransactionSignature.\n\nThe `LeaseAccount.extendInstruction()` and `LeaseAccount.extend()` methods are used to extend the lease by funding it with additional tokens.\n\nThe `LeaseAccount.withdrawInstruction()` and `LeaseAccount.withdraw()` methods allow withdrawing tokens from the LeaseAccount's escrow.\n\nThe `LeaseAccount.setAuthorityInstruction()` and `LeaseAccount.setAuthority()` methods are used to change the authority of a LeaseAccount.\n\nThe `LeaseAccount.estimatedLeaseTimeRemaining()` method estimates the time remaining on a given lease based on the oracleRequestBatchSize, minUpdateDelaySeconds, queueReward, and leaseBalance.\n\nThe `LeaseAccount.fetchAccounts()` and `LeaseAccount.fetchAllAccounts()` methods fetch associated accounts and their data, such as queueAccount, aggregatorAccount, escrow, balance, jobs, and wallets.\n\nExample usage:\n\n```ts\nimport { LeaseAccount } from '@switchboard-xyz/solana.js';\nconst [leaseAccount, leaseInitSignature] = await LeaseAccount.create(program, {\n  queueAccount,\n  aggregatorAccount,\n  fundAmount: 1,\n  funderAuthority: null,\n  funderTokenWallet: null,\n  disableWrap: false,\n  withdrawAuthority: null,\n  jobPubkeys: null,\n  jobAuthorities: null,\n});\nconst lease = await leaseAccount.loadData();\n```\n",
  "questions": "1. **Question**: What is the purpose of the `LeaseAccount` class and its associated methods?\n   **Answer**: The `LeaseAccount` class represents an AggregatorAccount's pre-funded escrow used to reward OracleAccounts for responding to open round requests. It provides methods to create, load, extend, and withdraw from a LeaseAccount, as well as fetch account information, balances, and estimate the time remaining on a lease.\n\n2. **Question**: How does the `createInstructions` method work and what are the required parameters?\n   **Answer**: The `createInstructions` method creates instructions to initialize a LeaseAccount and optionally funds it with wrapped tokens. It takes a `SwitchboardProgram` instance, a payer PublicKey, and a set of parameters including aggregatorAccount, queueAccount, and optional parameters like jobAuthorities, jobPubkeys, and withdrawAuthority. It returns a tuple containing the LeaseAccount and the corresponding TransactionObject.\n\n3. **Question**: How does the `estimatedLeaseTimeRemaining` method work and what does it return?\n   **Answer**: The `estimatedLeaseTimeRemaining` method estimates the time remaining on a given lease based on the oracleRequestBatchSize, minUpdateDelaySeconds, queueReward, and leaseBalance. It returns a tuple containing the number of milliseconds left in a lease and the estimated end date."
}