{
  "fileName": "SwitchboardProgram.ts",
  "filePath": "javascript/solana.js/src/SwitchboardProgram.ts",
  "url": "https://github.com/switchboard-xyz/sbv2-solana/blob/master/javascript/solana.js/src/SwitchboardProgram.ts",
  "summary": "The `sbv2-solana` code is a wrapper class for the Switchboard anchor Program, which provides an interface to interact with the Switchboard program on the Solana network. It allows you to load the program, create and initialize connection objects, and interact with Switchboard accounts.\n\nThe `SwitchboardProgram` class provides methods to load and interact with the Switchboard program on the Solana network. It includes methods to load the anchor program, create and initialize a connection object, and interact with Switchboard accounts. The class also provides methods to add and remove event listeners for specific AnchorEvents, allowing consumers to monitor the chain for events such as AggregatorOpenRound, VrfRequestRandomness, and AggregatorSaveResult.\n\nThe code also exports several constants, such as `SBV2_DEVNET_PID` and `SBV2_MAINNET_PID`, which represent the Switchboard Devnet and Mainnet Program IDs, respectively.\n\nHere's a basic usage example:\n\n```ts\nimport { Connection } from \"@solana/web3.js\";\nimport { SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';\n\nconst program = await SwitchboardProgram.load(\n   \"mainnet-beta\",\n   new Connection(\"https://api.mainnet-beta.solana.com\"),\n   payerKeypair\n);\n\nconst txn = new TransactionObject(program.walletPubkey, [], []);\nconst txnSignature = await program.signAndSend(txn);\n```\n\nThis code snippet demonstrates how to load the Switchboard program, create a new transaction object, and sign and send the transaction.",
  "questions": "1. **Question:** What is the purpose of the `SwitchboardProgram` class and how does it interact with the Solana network?\n\n   **Answer:** The `SwitchboardProgram` class provides an interface to interact with the Switchboard program on the Solana network. It allows you to load the program, create and initialize connection objects, and interact with Switchboard accounts. It provides methods to load anchor programs, sign and send transactions, and interact with various Switchboard accounts like aggregators, buffers, and oracles.\n\n2. **Question:** How does the `loadAnchorProgram` method work and what parameters does it accept?\n\n   **Answer:** The `loadAnchorProgram` method fetches the IDL for the Switchboard program and initializes an anchor program instance using the fetched IDL, provided program ID, and provider. It accepts the following parameters: `cluster` (the Solana cluster to load the Switchboard program for), `connection` (the Solana connection object used to connect to an RPC node), `payerKeypair` (optional payer keypair used to pay for on-chain transactions), and `programId` (optional program ID to override the cluster's default programId).\n\n3. **Question:** How can event listeners be added and removed for specific AnchorEvents in the Switchboard program?\n\n   **Answer:** The `addEventListener` method can be used to add an event listener for a specified AnchorEvent. It accepts the event name and a callback function to handle the event data, slot, and signature. The method returns a unique listener ID that can be used to remove the event listener. To remove an event listener, the `removeEventListener` method can be called with the unique listener ID as its parameter."
}