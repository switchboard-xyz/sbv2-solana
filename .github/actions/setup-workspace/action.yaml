name: "Setup workspace"

description:
  "Build the workspace and install all dependencies including Rust, Solana,
  Anchor, NodeJS, and pnpm"

inputs:
  rust-version:
    description: ""
    required: false
    default: "stable"
  solana-version:
    description: "the Solana version to install"
    required: false
    default: "stable"
  anchor-version:
    description: "the Anchor version to install"
    required: false
    default: "0.26.0"
  node-version:
    description: "the NodeJS version to install"
    required: false
    default: "18"
  pnpm-version:
    description: "the pnpm version to install"
    required: false
    default: "7.28.0"

runs:
  using: "composite"
  steps:
    # Install Linux Compilers
    - name: Install Linux Deps
      shell: bash
      run:
        sudo apt-get update && sudo apt-get install -y pkg-config
        build-essential libudev-dev

    # Install Rust Toolchain
    - name: Install Rust Stable
      id: rust_toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.rust-version }}
        override: true
        profile: minimal
        components: rustfmt, clippy
    - name: Add Cargo bin to Path
      shell: bash
      run: |
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Verify Rust install
      shell: bash
      run: |
        echo "Verifying rust '${{ inputs.toolchain }}' ..."
        rustc --version
        cargo --version
        cargo clippy --version
        rustfmt --version
    - name: Share rustc hash
      shell: bash
      run: |
        echo 'RUSTC_HASH=${{ steps.rust_toolchain.outputs.rustc_hash }}' >> $GITHUB_ENV

    # Install Solana Toolchain
    - name: Cache Solana Install
      id: cache-solana-install
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/solana/
          ~/.local/share/solana/
        key: ${{ runner.os }}-Solana-${{ inputs.solana-version  }}
    - name: Install Solana
      shell: bash
      if: steps.cache-solana-install.outputs.cache-hit != 'true'
      run:
        sh -c "$(curl -sSfL https://release.solana.com/${{
        inputs.solana-version}}/install)"
    - name: Add Solana bin to Path
      shell: bash
      run: |
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    - name: Verify Solana install
      shell: bash
      run: |
        solana --version

    # Install Anchor
    - name: Setup AVM Cache
      uses: actions/cache@v3
      id: cache-avm-cli
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-avm
    - name: Install AVM
      if: steps.cache-avm-cli.outputs.cache-hit != 'true'
      shell: bash
      run:
        cargo install --git https://github.com/project-serum/anchor avm --locked
        --force
    - name: Set Anchor Version
      shell: bash
      run: |
        avm install ${{ inputs.anchor-version }}
        avm use ${{ inputs.anchor-version }}
    - name: Verify Anchor install
      shell: bash
      run: anchor --version

    # Setup Keypair
    - name: Find or Create Keypair
      shell: bash
      run: |
        find ~/.config/solana/id.json || solana-keygen new -s --no-bip39-passphrase
        echo "DEFAULT_SOLANA_PUBLIC_KEY=$(solana-keygen pubkey ~/.config/solana/id.json)" >> $GITHUB_ENV

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{inputs.pnpm-version }}
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{inputs.node-version }}
        cache: "pnpm"
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    - name: Install Dependencies
      shell: bash
      run: pnpm install --frozen-lockfile
    - name: Setup Solana SDK Cache
      id: cache-solana-sdk-build
      uses: actions/cache@v3
      with:
        key:
          ${{ runner.os }}-Solana.js-${{
          hashFiles('javascript/solana.js/src/**') }}
        path: |
          javascript/solana.js/lib
    - name: Build solana.js
      if: steps.cache-solana-sdk-build.outputs.cache-hit != 'true'
      shell: bash
      working-directory: javascript/solana.js
      run: pnpm build
